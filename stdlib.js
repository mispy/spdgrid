// Generated by CoffeeScript 1.6.3
(function() {
  var AssertException, apply_test, delayed,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  RegExp.prototype.flags = function() {
    var flags;
    flags = "";
    if (this.ignoreCase) {
      flags += 'i';
    }
    if (this.multiline) {
      flags += 'm';
    }
    if (this.global) {
      flags += 'g';
    }
    return flags;
  };

  apply_test = function(test, el) {
    var key;
    if (test.call && test(el)) {
      return true;
    } else {
      for (key in test) {
        if (el[key] === test[key]) {
          return true;
        }
      }
    }
    return null;
  };

  Array.prototype.remove = function(e) {
    var t, _ref;
    if ((t = this.indexOf(e)) > -1) {
      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
    }
  };

  Array.prototype.find = function(test) {
    var el, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      el = this[_i];
      if (apply_test(test, el)) {
        return el;
      }
    }
    return null;
  };

  Array.prototype.find_index = function(test) {
    var el, i, _i, _len;
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      el = this[i];
      if (apply_test(test, el)) {
        return i;
      }
    }
    return null;
  };

  Array.prototype.find_all = function(test) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      el = this[_i];
      if (apply_test(test, el)) {
        _results.push(el);
      }
    }
    return _results;
  };

  Array.prototype.select = Array.prototype.find_all;

  Array.prototype.reject = function(test) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      el = this[_i];
      if (!apply_test(test, el)) {
        _results.push(el);
      }
    }
    return _results;
  };

  Array.prototype.remove_all = function(test) {
    var el, _i, _len, _ref, _results;
    _ref = this.find_all(test);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      _results.push(this.remove(el));
    }
    return _results;
  };

  Array.prototype.insert = function(index, el) {
    return this.splice(index, 0, el);
  };

  Array.prototype.last = function() {
    return this[this.length - 1];
  };

  Array.prototype.first = function() {
    return this[0];
  };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      if (!__hasProp.call(output, key)) continue;
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  Array.prototype.pluck = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return _.pluck.apply(_, [this].concat(__slice.call(args)));
  };

  Array.prototype.all = function(test) {
    return this.find_all(test).length === this.length;
  };

  Array.prototype.reversed = function() {
    return Array.prototype.slice.call(this).reverse();
  };

  Array.prototype.extend = function(arr) {
    return this.push.apply(this, arr);
  };

  Array.prototype.flatten = function() {
    var arr, val, _i, _len;
    arr = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      val = this[_i];
      if (val instanceof Array) {
        arr.extend(val.flatten());
      } else {
        arr.push(val);
      }
    }
    return arr;
  };

  Array.prototype.min = function() {
    return Math.min.apply(Math, this);
  };

  Array.prototype.max = function() {
    return Math.max.apply(Math, this);
  };

  Array.prototype.sample = function() {
    return this[Math.floor(Math.random() * this.length)];
  };

  String.prototype.strip = function(c) {
    if (c == null) {
      c = ' ';
    }
    return this.replace(new RegExp("^" + c + "+|" + c + "+$", 'g'), '');
  };

  String.prototype.lstrip = function(c) {
    if (c == null) {
      c = ' ';
    }
    return this.replace(new RegExp("^" + c + "+", 'g'), '');
  };

  String.prototype.rstrip = function(c) {
    if (c == null) {
      c = ' ';
    }
    return this.replace(new RegExp("" + c + "+$", 'g'), '');
  };

  String.prototype.downcase = function() {
    return this.toLowerCase();
  };

  String.prototype.upcase = function() {
    return this.toUpperCase();
  };

  String.prototype.gsub = function(target, repl) {
    return this.replace(new RegExp(target.source, target.flags() + 'g'), repl);
  };

  String.prototype.startswith = function(substr) {
    return this.indexOf(substr) === 0;
  };

  String.prototype.empty = function() {
    return this.length === 0;
  };

  window.Set = (function() {
    function Set() {}

    Set.prototype.add = function(obj) {
      return this[obj] = true;
    };

    Set.prototype.remove = function(obj) {
      return delete this[obj];
    };

    return Set;

  })();

  if (typeof jQuery !== "undefined" && jQuery !== null) {
    $.fn.parametrize = function() {
      "Find input element descendants and return a name->val mapping for them.";
      var input, key, params, val, _i, _len, _ref;
      params = {};
      _ref = $(this).find('input');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        key = $(input).attr('name') || $(input).attr('id');
        val = $(input).val();
        if (key && (val != null)) {
          params[key] = val;
        }
      }
      return params;
    };
  }

  window.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    "Wrapper for console.log";
    if (Settings.DEBUG) {
      return console.log.apply(console, args);
    }
  };

  delayed = {};

  window.delay = function() {
    var args, callback, delay, key;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    "A handy wrapper for setTimeout.\nAccepts 1-3 arguments, with the final argument always a function.\ndelay: Microseconds to delay execution.\nkey: A key that will be used to prevent multiple execution of the callback.\ncallback: Function to delay.";
    if (args[0] instanceof Function) {
      delay = 10;
      callback = args[0];
    } else {
      delay = args[0];
      if (typeof args[1] === 'string') {
        key = args[1];
        callback = args[2];
      } else {
        callback = args[1];
      }
    }
    if (key) {
      if (delayed[key]) {
        clearTimeout(delayed[key]);
      }
      return delayed[key] = setTimeout(callback, delay);
    } else {
      return setTimeout(callback, delay);
    }
  };

  AssertException = function(message) {
    return this.message = message;
  };

  window.assert = function(exp, message) {
    if (console.assert) {
      return console.assert(exp, message);
    } else if (!exp) {
      log(message);
      throw new AssertException(message);
    }
  };

  window.redirect = function(url) {
    return window.location.pathname = url;
  };

  window.refresh = function() {
    return window.location.reload();
  };

}).call(this);
